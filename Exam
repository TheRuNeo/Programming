#include <iostream>
#include <fstream>
#include <string>
#include <time.h>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;
 
bool isalpha_rus(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
        || c == 'ё' || c == 'Ё' || c=='-'; 
};
 
class GreaterSize
{
public:
    GreaterSize(){}
    bool operator()(const string& s1, const string& s2) const
    {
        return s2.size() < s1.size();
    }
};
 
/*struct S
{
    std::string str;
    int a;
};
 
class CompareStr
{
public:
    bool operator()(const S& s1, const S& s2) const
    {
        return s1.str < s2.str;
    }
};
 
class CompareA
{
public:
    bool operator()(const S& s1, const S& s2) const
    {
        return s1.a < s2.a;
    }
};
*/
 
int main() {
    setlocale(LC_ALL, "rus");
    time_t t = time(NULL);
    //map<string, size_t> words;
    map<string, size_t, GreaterSize> words;
    string w;
    fstream file("file.txt"), out_file("out_file.txt", fstream::out), out_file1("out_file1.txt", fstream::out);
    int it = file.get();
    /*if (!file.is_open()) {
        file.open("file.txt", fstream::out);
        return 0;
    }*/
    while (it != EOF) {
        while (it != EOF && isalpha_rus(it)) {
            w.push_back(it); // Добавление элемента в конец 
            it = file.get();
        }
        while (it != EOF  && !isalpha_rus(it = file.get()));
        if (!w.empty())
            ++words[w];
        w.clear();
    }
    if (!words.empty())
    for (auto &_pair : words)
        out_file << _pair.first << " = " << _pair.second << endl;
    file.close(); out_file.close();
    
    vector<pair<string, size_t>> line(words.begin(), words.end());
    //sort(line.begin(), line.end());
    //sort(line.begin(), line.end(), CompareStr());   //Сортировка по строкам
    //sort(words.begin(), words.end(), CompareA());   //Сортировка по целым
    for (auto &_pair : line)
        out_file1 << _pair.first << " = " << _pair.second << endl;
    out_file1.close();
 
    cout << "Время:" << (time(NULL) - t) << endl;
    system("pause");
    return 0;
}
